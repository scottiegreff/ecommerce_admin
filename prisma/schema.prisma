generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  label      String
  imageUrl   String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  categories Category[]

  @@index([storeId])
}

// Booking > Service m-n, Service > Booking m-n
// Shift > Booking m-n, Booking > Shift 1-1
model Booking {
  id             String    @id @default(uuid())
  storeId        String
  serviceId      String
  startOfBooking DateTime
  endOfBooking   DateTime
  createdAt      DateTime  @default(now())
  updatedAt      DateTime?
  shiftId        String
  employeeId     String
  customerId     String
  store          Store     @relation("StoreToBooking", fields: [storeId], references: [id])
  customer       Customer  @relation(fields: [customerId], references: [id])
  employee       Employee  @relation(fields: [employeeId], references: [id])
  service        Service[]
  shift          Shift     @relation(fields: [shiftId], references: [id])

  @@index([storeId])
}

model Category {
  id          String    @id @default(uuid())
  storeId     String
  billboardId String
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  itemType    ItemType
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  products    Product[] @relation("CategoryToProduct")
  services    Service[] @relation("CategoryToService")

  @@index([storeId])
  @@index([billboardId])
}

enum ItemType {
  GOODS
  SERVICES
}

model Color {
  id        String    @id @default(uuid())
  storeId   String
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation("StoreToColor", fields: [storeId], references: [id])
  products  Product[]

  @@index([storeId])
}

model Customer {
  id        String    @id @default(uuid())
  storeId   String
  custFName String
  custLName String
  email     String    @unique
  phone     String
  bookings  Booking[]
  orders    Order[]

  @@index([storeId])
}

model Employee {
  id        String    @id @default(uuid())
  storeId   String
  fName     String
  lName     String
  email     String    @unique
  phone     String
  color     String
  createdAt DateTime  @default(now())
  isActive  Boolean   @default(true)
  shifts    Shift[]   @relation("EmployeeToShift")
  services  Service[]
  bookings  Booking[]
  store     Store     @relation("StoreToEmployee", fields: [storeId], references: [id])

  @@index([storeId])
}

model Hero {
  id        String   @id @default(uuid())
  storeId   String
  label     String
  imageUrl  String
  logoUrl   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  store     Store    @relation("StoreToHero", fields: [storeId], references: [id])

  @@index([storeId])
}

model Image {
  id        String   @id @default(uuid())
  productId String?
  serviceId String?
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  service   Service? @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([serviceId])
}

model Order {
  id         String      @id @default(uuid())
  storeId    String
  customerId String?
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  customer   Customer?   @relation(fields: [customerId], references: [id])
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]

  @@index([storeId])
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String?
  serviceId String?
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product? @relation(fields: [productId], references: [id])
  service   Service? @relation(fields: [serviceId], references: [id])
  // @@index([bookingId])
  // @@index([customerId])

  @@index([orderId])
  @@index([productId])
  @@index([serviceId])
}

model Product {
  id         String      @id @default(uuid())
  storeId    String
  categoryId String
  name       String
  price      Decimal
  quantity   Int?
  cost       Decimal?
  markup     Decimal?
  margin     Decimal?
  profit     Decimal?
  isFeatured Boolean     @default(false)
  isArchived Boolean     @default(false)
  sizeId     String
  colorId    String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  images     Image[]
  orderItems OrderItem[]
  category   Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  color      Color       @relation(fields: [colorId], references: [id])
  size       Size        @relation(fields: [sizeId], references: [id])
  store      Store       @relation("StoreToProduct", fields: [storeId], references: [id])

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Service {
  id          String      @id @default(uuid())
  storeId     String
  categoryId  String
  name        String
  description String?
  duration    Int
  price       Decimal
  isFeatured  Boolean     @default(false)
  isArchived  Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  images      Image[]
  bookings    Booking[]
  employee    Employee[]
  category    Category    @relation("CategoryToService", fields: [categoryId], references: [id])
  store       Store       @relation("StoreToService", fields: [storeId], references: [id])
  OrderItem   OrderItem[]

  @@index([storeId])
  @@index([categoryId])
}

model Shift {
  id         String    @id @default(uuid())
  storeId    String
  employeeId String
  startShift DateTime
  endShift   DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  bookings   Booking[]
  employee   Employee  @relation("EmployeeToShift", fields: [employeeId], references: [id])
  store      Store     @relation("StoreToShift", fields: [storeId], references: [id])

  @@index([storeId])
  @@index([employeeId])
}

model Size {
  id        String    @id @default(uuid())
  storeId   String
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])

  @@index([storeId])
}

model Store {
  id         String      @id @default(uuid())
  name       String
  userId     String
  openTime   Int         @default(900) // 9:00 AM
  closeTime  Int         @default(1700) // 5:00 PM
  address    String?
  phone      String?
  email      String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  heros      Hero[]      @relation("StoreToHero")
  employees  Employee[]  @relation("StoreToEmployee")
  shifts     Shift[]     @relation("StoreToShift")
  bookings   Booking[]   @relation("StoreToBooking")
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  colors     Color[]     @relation("StoreToColor")
  orders     Order[]     @relation("StoreToOrder")
  products   Product[]   @relation("StoreToProduct")
  sizes      Size[]      @relation("StoreToSize")
  services   Service[]   @relation("StoreToService")
}
